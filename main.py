from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from tinkoff.invest import CandleInterval
from tinkoff.invest.retrying.aio.client import AsyncRetryingClient
from tinkoff.invest.retrying.settings import RetryClientSettings
from tinkoff.invest.utils import now
from datetime import timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from pandas import DataFrame
from tinkoff.invest import Client, SecurityTradingStatus
from tinkoff.invest.services import InstrumentsService
from tinkoff.invest.utils import quotation_to_decimal
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "" #–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∞–ø–∏
API_TOKEN = '' #–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π telegram api
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

Base = declarative_base()


class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True)
    portfolios = relationship('Portfolio', back_populates='user')
    favorites = relationship("FavoriteStock", back_populates="user")


class Portfolio(Base):
    __tablename__ = 'portfolios'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    name = Column(String, nullable=False)
    user = relationship('User', back_populates='portfolios')
    favorites = relationship('FavoriteStock', back_populates='portfolio')


class FavoriteStock(Base):
    __tablename__ = 'favorites'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    portfolio_id = Column(Integer, ForeignKey('portfolios.id'), nullable=True)
    ticker = Column(String, nullable=False)
    figi = Column(String, nullable=False)
    portfolio = relationship('Portfolio', back_populates='favorites')
    user = relationship('User', back_populates='favorites')


DATABASE_URL = "sqlite:///db/users.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
session = SessionLocal()

Base.metadata.create_all(engine)


class Form(StatesGroup):
    waiting_for_stock_ticker = State()
    waiting_for_favorite_stock_ticker = State()
    waiting_for_favorite_stock_to_delete_ticker = State()


logging.basicConfig(format="%(asctime)s %(levelname)s:%(message)s", level=logging.DEBUG)
logger = logging.getLogger(__name__)


def get_figi_by_ticker(ticker, token):
    with Client(token) as client:
        instruments: InstrumentsService = client.instruments
        tickers = []
        for method in ["shares", "bonds", "etfs", "currencies", "futures"]:
            for item in getattr(instruments, method)().instruments:
                tickers.append(
                    {
                        "name": item.name,
                        "ticker": item.ticker,
                        "class_code": item.class_code,
                        "figi": item.figi,
                        "uid": item.uid,
                        "type": method,
                        "min_price_increment": quotation_to_decimal(
                            item.min_price_increment
                        ),
                        "scale": 9 - len(str(item.min_price_increment.nano)) + 1,
                        "lot": item.lot,
                        "trading_status": str(
                            SecurityTradingStatus(item.trading_status).name
                        ),
                        "api_trade_available_flag": item.api_trade_available_flag,
                        "currency": item.currency,
                        "exchange": item.exchange,
                        "buy_available_flag": item.buy_available_flag,
                        "sell_available_flag": item.sell_available_flag,
                        "short_enabled_flag": item.short_enabled_flag,
                        "klong": quotation_to_decimal(item.klong),
                        "kshort": quotation_to_decimal(item.kshort),
                    }
                )

        tickers_df = DataFrame(tickers)

        ticker_df = tickers_df[tickers_df["ticker"] == ticker]
        if ticker_df.empty:
            logger.error("There is no such ticker: %s", ticker)
            return

        figi = ticker_df["figi"].iloc[0]
        return figi


async def get_stock_candles(figi):
    retry_settings = RetryClientSettings(use_retry=True, max_retry_attempt=2)
    async with AsyncRetryingClient(TOKEN, settings=retry_settings) as client:
        candles = []
        async for candle in client.get_all_candles(
                figi=figi,
                from_=now() - timedelta(days=1),
                interval=CandleInterval.CANDLE_INTERVAL_1_MIN,
        ):
            candles.append(candle)
        return candles[-1] if candles else None


@dp.message_handler(commands=['getstock'], state='*')
async def get_stock_command(message: types.Message):
    await Form.waiting_for_stock_ticker.set()
    await message.reply("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É:")


@dp.message_handler(state=Form.waiting_for_stock_ticker)
async def get_stock(message: types.Message, state: FSMContext):
    ticker = message.text
    figi = get_figi_by_ticker(ticker,
                              't.KSwT7xobACNy0ckOlifC8frON0c6g-m-hN2SnScqNaDB6BMyPYfhAWNhv4PHYB925ceVKbg12SmApMgpVF-3dQ')
    if figi:
        last_candle = await get_stock_candles(figi)
        if last_candle:
            await message.answer(
                f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ {ticker}: {(str(last_candle.close).split(',')[0]).split('=')[1]} —Ä—É–±")
        else:
            await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏.")
    else:
        await message.answer("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ü–∏—é —Å —Ç–∞–∫–∏–º —Ç–∏–∫–µ—Ä–æ–º.")
    await state.finish()


@dp.message_handler(commands=['addfavorite'], state='*')
async def add_favorite_command(message: types.Message):
    await Form.waiting_for_favorite_stock_ticker.set()
    await message.reply("üíñ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:")


@dp.message_handler(state=Form.waiting_for_favorite_stock_ticker)
async def add_stock_to_favorites(message: types.Message, state: FSMContext):
    ticker = message.text.upper()
    figi = get_figi_by_ticker(ticker, TOKEN)
    if figi is None:
        await message.answer(f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ü–∏—é —Å —Ç–∏–∫–µ—Ä–æ–º: {ticker}.")
        await state.finish()
        return

    try:
        user_id = message.from_user.id
        user = session.query(User).filter(User.id == user_id).first()
        if not user:
            user = User(id=user_id, username=message.from_user.username)
            session.add(user)
            session.commit()

        new_favorite = FavoriteStock(user_id=user.id, ticker=ticker, figi=figi)
        session.add(new_favorite)
        session.commit()
        await message.answer(f"‚úÖ –ê–∫—Ü–∏—è {ticker} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

    await state.finish()


@dp.message_handler(commands=['deletefavorite'], state='*')
async def delete_favorite_command(message: types.Message):
    await Form.waiting_for_favorite_stock_to_delete_ticker.set()
    await message.reply("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:")


@dp.message_handler(state=Form.waiting_for_favorite_stock_to_delete_ticker)
async def delete_stock_from_favorites(message: types.Message, state: FSMContext):
    ticker = message.text.upper()
    user_id = message.from_user.id

    try:
        favorite_stock = session.query(FavoriteStock).filter(
            FavoriteStock.user_id == user_id,
            FavoriteStock.ticker == ticker
        ).first()

        if favorite_stock:
            session.delete(favorite_stock)
            session.commit()
            await message.answer(f"üóëÔ∏è –ê–∫—Ü–∏—è {ticker} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        else:
            await message.answer(f"ü§∑‚Äç‚ôÇÔ∏è –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

    await state.finish()


@dp.message_handler(commands=['myfavorites'])
async def show_favorites(message: types.Message):
    user_id = message.from_user.id
    user_favorites = session.query(FavoriteStock).filter(FavoriteStock.user_id == user_id).all()
    if not user_favorites:
        await message.answer("üíî –í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ü–∏–π.")
        return

    response = "üíñ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π:\n"
    for favorite in user_favorites:
        last_candle = await get_stock_candles(favorite.figi)
        if last_candle:
            price = (str(last_candle.close).split(',')[0]).split('=')[1]
            response += f"- {favorite.ticker}: {price} —Ä—É–±\n"
        else:
            response += f"- {favorite.ticker}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n"

    await message.answer(response)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç üìà. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n"
        "üîç –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ - —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π\n"
        "üíñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö\n"
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
        "üíî –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/menu - –≤—ã–∑–æ–≤ —É–¥–æ–±–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á—Ç–æ–±—ã –ª–µ–≥—á–µ –æ–ø–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏. \n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n"
        "/getstock - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 'YNDX' –¥–ª—è Yandex.\n"
        "/addfavorite - –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "/myfavorites - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –∏ –∏—Ö —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã.\n"
        "/deletefavorite - —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    )

    await message.reply(help_text)


@dp.message_handler(commands=['menu'])
async def show_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(
    lambda message: message.text in ["üîç –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏", "üíñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                                     "üíî –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
async def handle_keyboard_commands(message: types.Message):
    if message.text == "üîç –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏":
        await get_stock_command(message)
    elif message.text == "üíñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await add_favorite_command(message)
    elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ":
        await delete_favorite_command(message)
    elif message.text == "üíî –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await show_favorites(message)
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await send_help(message)


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîç –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"))
    keyboard.add(KeyboardButton("üíñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"))
    keyboard.add(KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"))
    keyboard.add(KeyboardButton("üíî –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
